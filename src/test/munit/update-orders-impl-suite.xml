<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="update-orders-impl-suite.xml" />
	<munit:test name="update-orders-impl-test-no-cart-found" doc:id="acb8a8be-36a1-4921-adee-32899965afaa" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Contains shopping cart" doc:id="8019aa6c-d30b-4467-8d76-afc9779741fe" processor="os:contains">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a29be8b2-9cc9-4f0e-8b7c-57e328699cf6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://updateordersimpltest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="2b09e9c7-a742-442a-b6e9-2563ec64a10c" >
				<munit:payload value="#[output application/json --- readUrl('classpath://updateordersimpltest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://updateordersimpltest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://updateordersimpltest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to update-orders-impl" doc:id="4548f146-85e1-4698-a29f-f59d3f153437" name="update-orders-impl"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="db0b794a-660c-4290-9819-439c95b9743f" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import updateordersimpltest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="update-orders-impl-test" doc:id="d5e74d5a-56fb-47ba-a12b-d081428fbaca" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Contains shopping cart" doc:id="59f72f53-edc0-46ee-8008-d0752cce7c60" processor="os:contains">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a29be8b2-9cc9-4f0e-8b7c-57e328699cf6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://updateordersimpltest\mock_payload1.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Retrieve shopping cart" doc:id="8af7b491-04c6-4825-a6de-17323884a770" processor="os:retrieve">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="1d5cfc58-8cbc-4bf5-ac01-725cae01894b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://updateordersimpltest\mock_payload2.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Overwrite shopping cart" doc:id="2f9ea1d1-715c-4891-93eb-d69b5f8ec0c6" processor="os:store">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="91e428ba-480b-4b33-85d1-2458f945109b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://updateordersimpltest\mock_payload3.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="abebcb54-8663-4562-86e9-6ece346d7d07" >
				<munit:payload value="#[output application/json --- readUrl('classpath://updateordersimpltest\set-event_payload1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://updateordersimpltest\set-event_attributes1.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to update-orders-impl" doc:id="3dbe9922-ed4b-4ab1-ba56-44b33a611985" name="update-orders-impl"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="4534d349-4a13-4b2d-bd8b-835744a3fead" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import updateordersimpltest::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
